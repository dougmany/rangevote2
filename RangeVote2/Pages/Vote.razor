@page "/vote"

<PageTitle>@electionId</PageTitle>

@using RangeVote2.Data
@inject RangeVoteRepository _repository
@inject NavigationManager _navigationManager

@if (candidates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Trip Vote</h1>

    <p>Rows will <strong>sort themselves</strong> as you click.</p>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th style="width:200px;">Score</th>
            </tr>
        </thead>
        <tfoot>
            @message
            <button class="btn btn-primary" @onclick="SaveScores">Save</button>
        </tfoot>
        <tbody>
            @foreach (var trip in candidates.OrderByDescending(t => t.Score))
            {
                <tr>
                    <td><h4>@trip.Name</h4>@trip.Description</td>
                    <td><button class="btn btn-primary" @onclick="@(() => DecrementScore(@trip.Name??""))">-</button> <button class="btn" @onclick="@(() => DecrementScorePt(@trip.Name??""))">-</button> @trip.ScoreString <button class="btn" @onclick="@(() => IncrementScorePt(@trip.Name??""))">+</button> <button class="btn btn-primary" @onclick="@(() => IncrementScore(@trip.Name??""))">+</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public String? userId { get; set; }
    [Parameter]
    [SupplyParameterFromQuery] 
    public String? electionId { get; set; }
    Candidate[]? candidates;
    String? message;

    protected override async Task OnInitializedAsync()
    {
        if (userId is not null && userId is not "" && electionId is not null && electionId is not "")
        {
            var ballot = await _repository.GetBallotAsync(Guid.Parse(userId), electionId);
            candidates = ballot.Candidates;
        }
    }
    void IncrementScore(String name)
    {
        if (candidates is not null)
        {
            var trip = candidates.Where(t => t.Name == name).FirstOrDefault();
            if (trip != null)
            {
                if (trip.Score < 90)
                {
                    trip.Score += 10;
                }
            }
        }
    }

    void IncrementScorePt(String name)
    {

        if (candidates != null)
        {
            var trip = candidates.Where(t => t.Name == name).FirstOrDefault();

            if (trip is not null && trip.Score < 99)
            {
                trip.Score++;
            }
        }
    }

    void DecrementScore(String name)
    {
        if (candidates != null)
        {
            var trip = candidates.Where(t => t.Name == name).FirstOrDefault();
            if (trip != null)
            {
                if (trip.Score > 10)
                {
                    trip.Score -= 10;
                }
                else if (trip.Score <= 10)
                {
                    trip.Score = 0;
                }
            }
        }
    }

    void DecrementScorePt(String name)
    {
        if (candidates != null)
        {
            var trip = candidates.Where(t => t.Name == name).FirstOrDefault();
            if (trip != null)
            {
                if (trip.Score > 0)
                {
                    trip.Score--;
                }
            }
        }
    }

    async Task SaveScores()
    {
        if (userId is not null && userId != "" && electionId is not null && electionId != "")
        {
            message = "Saving...";
            await _repository.PutBallotAsync(new Ballot { Id = Guid.Parse(userId), Candidates = candidates }, electionId);

            _navigationManager.NavigateTo($"ballots?userId={userId}", true);

        }
    }
}
